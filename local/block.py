import pygame
import numpy as np
from lib.interface import Form, C
from spec import Spec


# load imgs
img_shield = pygame.image.load('imgs/shield.png')
img_shield = pygame.transform.scale(img_shield, Spec.DIM_ITEM)

img_energie = pygame.image.load('imgs/energie.png')
img_energie = pygame.transform.scale(img_energie, Spec.DIM_ITEM)

img_engine = pygame.image.load('imgs/engine.png')
img_engine = pygame.transform.scale(img_engine, Spec.DIM_ITEM)

img_turret = pygame.image.load('imgs/turret.png')
img_turret = pygame.transform.rotate(img_turret, 90)
img_turret = pygame.transform.scale(img_turret, Spec.DIM_TURRET)

class Block(Form):

    name = 'Block'

    def __init__(self, coord, color=None, image=None, hp=None):

        if hp == None:
            self.hp = Spec.HP_BLOCK
        else:
            self.hp = hp

        self.active = True
        self.power_output = 0

        self.coord = np.array(coord, dtype='int16')

        # set up the surface
        if color == None:
            color = C.BLUE
        
        if image == None:
            with_font = False
        else:
            with_font = True

        # the position doesn't matter as the block's surface will be compiled in the ship image
        super().__init__(Spec.DIM_BLOCK, (0,0), color=color, surface=image, with_font=with_font, marge=True)

        self.set_marge_width(Spec.DIM_BLOCK_MARGE, scale=True)

    def get_power_output(self):

        if self.is_active:
            return self.power_output
        else:
            return 0

    @property
    def is_active(self):
        return self.active
    
    @is_active.setter
    def is_active(self, value):
        self.active = value

    def __str__(self):
        return f'{self.name} object at {self.coord}'

    def __repr__(self):
        return self.__str__()

    def display(self):
        super().display(marge=True)


class Energie(Block):

    name = 'Energie'

    def __init__(self, coord, color=None):
        super().__init__(coord, color=color)

        self.power_output = Spec.POWER_ENERGIE

        # blit the energie image on the surface -> can resize the image
        self.surf['original'].blit(img_energie, (Spec.DIM_BLOCK-Spec.DIM_ITEM)//2)
        self.set_surf(self.surf['original'])

class Engine(Block):

    name = 'Engine'

    def __init__(self, coord, color=None):
        super().__init__(coord, color=color)

        self.power_output = -Spec.POWER_CONS_MOTOR
        self.activation_per = 1 # % of activation

        # blit the engine image on the surface -> can resize the image
        self.surf['original'].blit(img_engine, (Spec.DIM_BLOCK-Spec.DIM_ITEM)//2)
        self.set_surf(self.surf['original'])
    
    @property
    def is_active(self):
        return self.active

    @is_active.setter
    def is_active(self, value):
        if value == False:
            self.activation_per = 0
            self.active = False
        else:
            # by default: activate the engine on full power
            self.activation_per = 1
            self.active = True

    def get_engine_power(self):
        '''Return the force generated by the engine.'''
        return Spec.MOTOR_POWER * self.activation_per

class Shield(Block):

    name = 'Shield'

    def __init__(self, coord, color=None):
        super().__init__(coord, color=color)

        self.power_output = -Spec.POWER_CONS        

        # blit the shield image on the surface -> can resize the image
        self.surf['original'].blit(img_shield, (Spec.DIM_BLOCK-Spec.DIM_ITEM)//2)
        self.set_surf(self.surf['original'])


class Turret(Block):

    name = 'Turret'

    def __init__(self, coord, color=None):
        super().__init__(coord, color=color)

        self.power_output = -Spec.POWER_CONS

        # blit the turret image on the surface -> can resize the image
        self.surf['original'].blit(img_turret, (Spec.DIM_BLOCK-Spec.DIM_TURRET)//2)
        self.set_surf(self.surf['original'])

        self.damage = Spec.DAMAGE_TURRET
